generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Program Areas (e.g., "Arts, Humanities and Social Sciences", "Business and Management")
model ProgramArea {
  id       Int       @id @default(autoincrement())
  nid      Int       @unique // Original VIU nid
  title    String    @unique
  programs Program[]
}

// VIU Programs/Credentials
model Program {
  id                Int              @id @default(autoincrement())
  nid               Int              @unique // Original VIU nid
  title             String
  duration          String? // e.g., "Bachelor's", null for certificates
  credential        CredentialType
  viuSearchKeywords String?
  nocSearchKeywords String[]
  knownNocGroups    String[] // NOC codes that are known to relate to this program
  programAreaId     Int
  programArea       ProgramArea      @relation(fields: [programAreaId], references: [id])
  programNocLinks   ProgramNocLink[] // Many-to-many relationship with NOC codes
}

// NOC Unit Groups (all NOC codes and their details)
model NocUnitGroup {
  id              Int              @id @default(autoincrement())
  nocCode         String           @unique // e.g., "00010"
  occupation      String // Job title
  sections        NocSection[]
  outlooks        Outlook[]
  programNocLinks ProgramNocLink[] // Many-to-many relationship with programs
}

// Sections within NOC codes (e.g., "Main duties", "Employment requirements")
model NocSection {
  id           Int          @id @default(autoincrement())
  nocCode      String
  title        String // e.g., "Main duties", "Employment requirements"
  items        String[] // Array of strings for the section content
  nocUnitGroup NocUnitGroup @relation(fields: [nocCode], references: [nocCode], onDelete: Cascade)

  @@unique([nocCode, title])
}

// Economic Regions for outlook data
model EconomicRegion {
  id                 Int       @id @default(autoincrement())
  economicRegionCode String    @unique // e.g., "1000", "1010"
  economicRegionName String? // Name of the region (if available)
  province           String // Province code (e.g., "NL", "PE", "NS")
  outlooks           Outlook[]
}

// 3-year employment outlooks
model Outlook {
  id                 Int            @id @default(autoincrement())
  nocCode            String
  economicRegionCode String
  outlook            String // The actual outlook value
  employmentTrends   String? // Employment trends data
  releaseDate        DateTime
  province           String // Province code
  language           String         @default("EN")
  nocUnitGroup       NocUnitGroup   @relation(fields: [nocCode], references: [nocCode])
  economicRegion     EconomicRegion @relation(fields: [economicRegionCode], references: [economicRegionCode])

  @@unique([nocCode, economicRegionCode, province, releaseDate, language])
}

// Many-to-many relationship between Programs and NOC codes
model ProgramNocLink {
  id           Int          @id @default(autoincrement())
  programId    Int
  nocCode      String
  isKnown      Boolean      @default(false) // true if from knownNocGroups, false if inferred
  confidence   Float?       @default(1.0) // confidence score for the relationship
  program      Program      @relation(fields: [programId], references: [id], onDelete: Cascade)
  nocUnitGroup NocUnitGroup @relation(fields: [nocCode], references: [nocCode], onDelete: Cascade)

  @@unique([programId, nocCode])
}

enum CredentialType {
  Certificate
  Diploma
  Degree
}
